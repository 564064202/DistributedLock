* Consider destructor to avoid the connection pool re-acquisition issue (to avoid the finalizable object in a finalizer issue, we'd have to have the scope
object hold an object which keys into a conditional weak table that holds the transaction)
* Consider providing a hook into when we lose connection to SQL (connection state changed event)
* Consider an option for using distributed transactions w/transaction scope instead of holding connections open (probably bad because we don't know where else the scope will flow)
* Expose security options for event wait handles
* Make multiplexing smarter about holding the same lock multiple times (see note in MultiplexedConnectionLock where we check if the lock is already held)
* v2 idea: expose ReleaseAsync option by not just returning IDisposable
* v2 idea: use awaitabledisposable pattern for async returns
* v2 idea: remove DbConnection/DbTransaction constructors in favor of just the interface constructors
* v2 idea: keepalive as part of cleanup for multiplexed connections (potentially allow for all connection strategies)
	- potentially we should just detect Azure (http://stackoverflow.com/questions/21582195/how-to-test-if-database-is-hosted-on-sql-azure)
	- would need to be opt-in for passed in transactions/connections
* v2 idea: cancellationtoken which can trigger if the connection is lost. Basically would do cancellable WAITFOR which hopefully fails on killed spid
	- this will also be opt-in for passed-in trasnaction/connections
	- this could be part of the same concept as keepalive
* v2: UpgradeToWriteLock(Async) should return void/Task not bool/Task<bool>